#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: OpenWrt-CI-SSH

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir

          df -h

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          cat >> .config <<EOF
          
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_KERNEL_BUILD_USER="OpenWrt-CI"
          CONFIG_KERNEL_BUILD_DOMAIN="Azure"
          
          # DIY
          CONFIG_CRYPTO_CHACHA20_X86_64=y
          CONFIG_CRYPTO_POLY1305_X86_64=y
          
          # 设置固件大小:
          CONFIG_TARGET_ROOTFS_PARTSIZE=2024

          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y

          # EFI支持:
          CONFIG_GRUB_IMAGES=y
          CONFIG_EFI_IMAGES=y
          CONFIG_VMDK_IMAGES=n
          CONFIG_TARGET_ROOTFS_TARGZ=n

          CONFIG_PACKAGE_luci-app-turboacc=y
          CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_flow-offload=n
          CONFIG_PACKAGE_luci-app-turboacc_INCLUDE_shortcut-fe=y

          # 其他需要安装的软件包:
          CONFIG_PACKAGE_luci-proto-bonding=y
          CONFIG_PACKAGE_autocore-x86=y

          # Wireless
          CONFIG_PACKAGE_wpad-basic-wolfssl=y

          # x86
          CONFIG_PACKAGE_kmod-usb-hid=y
          CONFIG_PACKAGE_qemu-ga=y
          CONFIG_PACKAGE_lm-sensors-detect=y
          CONFIG_PACKAGE_kmod-bonding=y
          CONFIG_PACKAGE_kmod-mmc-spi=y
          CONFIG_PACKAGE_kmod-sdhci=y
          CONFIG_PACKAGE_kmod-vmxnet3=y
          CONFIG_PACKAGE_kmod-igbvf=y
          CONFIG_PACKAGE_kmod-ixgbe=y
          CONFIG_PACKAGE_kmod-pcnet32=y
          CONFIG_PACKAGE_kmod-r8125=y
          CONFIG_PACKAGE_kmod-r8168=y
          CONFIG_PACKAGE_kmod-8139cp=y
          CONFIG_PACKAGE_kmod-8139too=y
          CONFIG_PACKAGE_kmod-i40e=y
          CONFIG_PACKAGE_kmod-i40evf=y
          CONFIG_PACKAGE_kmod-ath5k=y
          CONFIG_PACKAGE_kmod-ath9k=y
          CONFIG_PACKAGE_kmod-ath9k-htc=y
          CONFIG_PACKAGE_kmod-ath10k=y
          CONFIG_PACKAGE_kmod-rt2800-usb=y
          CONFIG_PACKAGE_kmod-mlx4-core=y
          CONFIG_PACKAGE_kmod-mlx5-core=y
          CONFIG_PACKAGE_kmod-alx=y
          CONFIG_PACKAGE_kmod-tulip=y
          CONFIG_PACKAGE_kmod-tg3=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          CONFIG_PACKAGE_ath10k-firmware-qca9888=y
          CONFIG_PACKAGE_ath10k-firmware-qca988x=y
          CONFIG_PACKAGE_ath10k-firmware-qca9984=y
          CONFIG_PACKAGE_brcmfmac-firmware-43602a1-pcie=y
          CONFIG_PACKAGE_kmod-ac97=y
          CONFIG_PACKAGE_kmod-sound-via82xx=y
          CONFIG_PACKAGE_alsa-utils=y
          CONFIG_PACKAGE_kmod-iwlwifi=y
          CONFIG_PACKAGE_snmpd=y
          CONFIG_PACKAGE_acpid=y
          CONFIG_PACKAGE_blkid=y
          CONFIG_PACKAGE_smartmontools=y

          # USB3.0支持:
          CONFIG_PACKAGE_kmod-usb2=y
          CONFIG_PACKAGE_kmod-usb2-pci=y
          CONFIG_PACKAGE_kmod-usb3=y
          CONFIG_PACKAGE_kmod-usb-audio=y
          CONFIG_PACKAGE_kmod-usb-printer=y
          CONFIG_PACKAGE_automount=y
          CONFIG_PACKAGE_autosamba=y
          CONFIG_PACKAGE_autosamba-ksmbd=y
          #ksmbd
          CONFIG_PACKAGE_kmod-fs-ksmbd=y
          #nfs
          CONFIG_PACKAGE_kmod-fs-nfsd=y
          CONFIG_PACKAGE_kmod-fs-nfs=y
          CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          #3G/4G Support
          CONFIG_PACKAGE_kmod-usb-serial=y
          CONFIG_PACKAGE_kmod-usb-serial-option=y
          CONFIG_PACKAGE_kmod-usb-serial-wwan=y
          CONFIG_PACKAGE_kmod-mii=y
          CONFIG_PACKAGE_kmod-usb-acm=y
          #Sound Support
          CONFIG_PACKAGE_kmod-sound-core=y
          CONFIG_PACKAGE_kmod-sound-hda-core=y
          CONFIG_PACKAGE_kmod-sound-hda-codec-realtek=y
          CONFIG_PACKAGE_kmod-sound-hda-codec-via=y
          CONFIG_PACKAGE_kmod-sound-hda-intel=y
          CONFIG_PACKAGE_kmod-sound-hda-codec-hdmi=y
          #USB net driver
          CONFIG_PACKAGE_kmod-rtlwifi=y
          CONFIG_PACKAGE_kmod-rtlwifi-btcoexist=y
          CONFIG_PACKAGE_kmod-rtlwifi-usb=y
          CONFIG_PACKAGE_kmod-rtl8812au-ac=y
          CONFIG_PACKAGE_usb-modeswitch=y
          CONFIG_PACKAGE_kmod-rtl8192cu=y
          CONFIG_PACKAGE_kmod-rtl8821cu=y
          CONFIG_PACKAGE_kmod-mt76=y
          CONFIG_PACKAGE_kmod-mt76x2u=y
          CONFIG_PACKAGE_kmod-usb-net-asix=y
          CONFIG_PACKAGE_kmod-usb-net-asix-ax88179=y
          CONFIG_PACKAGE_kmod-usb-net-rtl8152-vendor=y
          CONFIG_PACKAGE_kmod-usb-net-rndis=y
          CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y

          # docker
          CONFIG_PACKAGE_kmod-fs-btrfs=y
          CONFIG_PACKAGE_kmod-dm=y
          CONFIG_PACKAGE_kmod-br-netfilter=y
          CONFIG_PACKAGE_kmod-ikconfig=y
          CONFIG_PACKAGE_kmod-nf-conntrack-netlink=y
          CONFIG_PACKAGE_kmod-nf-ipvs=y
          CONFIG_PACKAGE_kmod-veth=y
          CONFIG_PACKAGE_kmod-dummy=y

          EOF

          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: SSH connection to Actions
        uses: garypang13/debugger-action@master
        if: contains(github.event.action, 'ssh')

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
